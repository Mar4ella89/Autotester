// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç
function addToReport(message) {
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–≥–∏ <noscript> –∏ <iframe>
  const escapedMessage = escapeHTML(message);
  report.push(escapedMessage);
  console.log(message); // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–µ–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º DOM (—Å —É—á–µ—Ç–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
function checkTag(tag, description) {
  if (tag === "iframe") {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ <iframe>, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö id="admin-frame"
    const iframes = [...document.querySelectorAll("iframe")].filter(
      (iframe) => iframe.id !== "admin-frame"
    );

    if (iframes.length > 0) {
      addToReport(`‚ùå ${description} –Ω–∞–π–¥–µ–Ω`);
    }
  } else {
    const element = document.querySelector(tag);
    if (element) {
      addToReport(`‚ùå ${description} –Ω–∞–π–¥–µ–Ω`);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ rel="preloader" –∏ rel="preconnect"
function checkLinkRel(rel) {
  const link = document.querySelector(`link[rel="${rel}"]`);
  if (link) {
    addToReport(`‚ùå link[rel="${rel}"] –Ω–∞–π–¥–µ–Ω`);
  } 
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–µ–≥–æ–≤ –≤ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ
function checkInComments() {
  const comments = [];

  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  function searchComments(node) {
    if (node.nodeType === Node.COMMENT_NODE) {
      comments.push(node.nodeValue);
    } else if (node.childNodes) {
      node.childNodes.forEach(searchComments);
    }
  }

  // –û–±—Ö–æ–¥ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–±–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  searchComments(document);

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
  const commentContent = comments.join("\n");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω—É–∂–Ω—ã–µ —Ç–µ–≥–∏
  const checks = [
    { regex: /<link[^>]*rel=["']?preloader["']?[^>]*>/i, name: 'link[rel="preloader"]' },
    { regex: /<link[^>]*rel=["']?preconnect["']?[^>]*>/i, name: 'link[rel="preconnect"]' },
    { regex: /<noscript>/i, name: '<noscript>' },
    { regex: /<iframe>/i, name: '<iframe>' }
  ];

  checks.forEach(({ regex, name }) => {
    if (regex.test(commentContent)) {
      addToReport(`‚ö†Ô∏è ${name} –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö`);
    } 
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ {_dmnd} –∏ {_dmndf}
function checkDmndOrder() {
  const bodyContent = document.body.innerHTML;

  // –ò—â–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è {_dmnd} –∏ {_dmndf}
  const dmndMatches = [...bodyContent.matchAll(/{_dmnd}/g)];
  const dmndfMatches = [...bodyContent.matchAll(/{_dmndf}/g)];

  if (dmndMatches.length !== 1 || dmndfMatches.length !== 1) {
    addToReport("‚ùå –û—à–∏–±–∫–∞: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 1 {_dmnd} –∏ 1 {_dmndf}");
    return;
  }

  const dmndIndex = dmndMatches[0].index;
  const dmndfIndex = dmndfMatches[0].index;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ {_dmnd} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ {_dmndf}
  if (dmndIndex > dmndfIndex) {
    addToReport("‚ùå –û—à–∏–±–∫–∞: {_dmnd} –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –≤—ã—à–µ {_dmndf} –≤ –∫–æ–¥–µ");
    return;
  }

  // –ù–∞–π–¥–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã <div> –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
  const allDivs = [...document.querySelectorAll("div")];

  let dmndElement = null;
  let dmndfElement = null;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ {_dmnd} –∏ {_dmndf}
  allDivs.forEach((div) => {
    if (div.innerHTML.includes("{_dmnd}")) {
      dmndElement = div;
    }
    if (div.innerHTML.includes("{_dmndf}")) {
      dmndfElement = div;
    }
  });

  if (!dmndElement || !dmndfElement) {
    addToReport("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã {_dmnd} –∏–ª–∏ {_dmndf}");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–∂–¥—É {_dmnd} –∏ {_dmndf} –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  let sibling = dmndElement.nextElementSibling;
  let hasValidContentBetween = false;

  while (sibling && sibling !== dmndfElement) {
    if (sibling.tagName !== "DIV" || sibling.textContent.trim().length > 0) {
      hasValidContentBetween = true;
      break;
    }
    sibling = sibling.nextElementSibling;
  }

  if (!hasValidContentBetween) {
    addToReport("‚ùå –û—à–∏–±–∫–∞: {_dmnd} –∏ {_dmndf} –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –ø–æ–¥—Ä—è–¥");
    return;
  }

  addToReport("‚úÖ {_dmnd} –∏ {_dmndf} —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}


// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
function runTests() {
  addToReport("=== –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–æ–≤ ===");

  checkLinkRel("preloader");
  checkLinkRel("preconnect");
  checkTag("noscript", "<noscript>");
  checkTag("iframe", "<iframe>");
  checkInComments();
  checkDmndOrder(); // –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ {_dmnd} –∏ {_dmndf}

  addToReport("=== –ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤ ===");

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
  return report.join("\n");
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function showModalReport(report) {
  injectStyles(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞

  // –°–æ–∑–¥–∞–µ–º HTML –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const modalHTML = `
    <div id="autotest-modal" class="modal-overlay">
      <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>üõ†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
        <pre class="modal-report">${report}</pre>
        <button class="ok-button">–û–ö</button>
      </div>
    </div>
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ body
  document.body.insertAdjacentHTML("beforeend", modalHTML);

  // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ–∫–Ω–∞
  const modal = document.getElementById("autotest-modal");
  const closeButton = modal.querySelector(".close-button");
  const okButton = modal.querySelector(".ok-button");

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
  function closeModal() {
    modal.remove();
    removeScriptTag(); // –£–¥–∞–ª—è–µ–º —Ç–µ–≥ <script>
  }

  // –°–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
  closeButton.addEventListener("click", closeModal);
  okButton.addEventListener("click", closeModal);
  modal.addEventListener("click", (event) => {
    if (event.target === modal) closeModal();
  });
  document.addEventListener("keydown", (event) => {
    if (event.key === "Escape") closeModal();
  });
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞ <script>
function removeScriptTag() {
  const scriptTag = document.querySelector('script[src="./autotest.js"]');
  if (scriptTag) scriptTag.remove();
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∂–µ–∫—Ç–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function injectStyles() {
  const style = document.createElement("style");
  style.innerHTML = `
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.6);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }
    .modal-content {
      background: white;
      padding: 20px;
      border-radius: 8px;
      width: 400px;
      max-width: 90%;
      text-align: center;
      box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.3);
      position: relative;
    }
    .modal-content h2 {
      margin-bottom: 15px;
      font-size: 18px;
    }
    .close-button {
      position: absolute;
      top: 10px;
      right: 15px;
      font-size: 20px;
      cursor: pointer;
    }
    .modal-report {
      background: #f5f5f5;
      padding: 10px;
      border-radius: 5px;
      font-size: 14px;
      max-height: 200px;
      overflow-y: auto;
      text-align: left;
    }
    .ok-button {
      margin-top: 10px;
      padding: 8px 15px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    .ok-button:hover {
      background: #0056b3;
    }
  `;
  document.head.appendChild(style);
}

// –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", () => {
  const report = runTests();
  showModalReport(report);
});
